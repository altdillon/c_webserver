(function(w,d){

    var game = {}; // object for game stuff 

    // create an instance of the canvas and other useful objects
    const canvas = d.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    canvas.height = Math.floor(w.innerHeight/2);
    canvas.width = Math.floor(w.innerWidth/2);
    game.lastTime = Date.now();
    game.entities = {}; // object for all the stuff currnetly on the screen
    game.frameCount = 0;
    game.startTime = Date.now();

    var Input = function(){
        this.keyPressCount = 0;
        this.lastKey = null; // bad I know...
        this.keyStatus = []; // array to store which key was pressed last 
        this.hi = "hello!";
    }

    Input.prototype.initKeys = function(){
        var inputThis = this;

        function lastKey(event,status){
            inputThis.keyPressCount ++;
            inputThis.lastKey = event.key;

            inputThis.keyStatus[event.key] = status;          

        }

        d.addEventListener('keydown',function(e){
            lastKey(e,true);
        });

        d.addEventListener('keyup',function(e){
            lastKey(e,false);
        });
    }

    // object for the player 
    var Player = function(){
        this.ds = 40;
        this.posX = 200;
        this.posY = 200;
        // make an enum for the player direction
        this.playerDir = {
          Up: 0,
          Down: 1,
          Left: 2,
          Right: 3
        }
  
        this._direction = this.playerDir.Down; // defult starting direction
        this._sprites = {
          up: null,
          down: null,
          left: null,
          right: null
        }
    }

    Player.prototype.drawPlayer = function(){
        ctx.fillRect(this.posX,this.posY,10,10);
    }

    // functions for moving the player around the map
    Player.prototype.moveUp = function(dt){
      this.posY = this.posY - this.ds*dt;
      this._direction = this.playerDir.Up;
    }

    Player.prototype.moveDown = function(dt){
      this.posY = this.posY + this.ds*dt;
      this._direction = this.playerDir.Down;
    }

    Player.prototype.moveLeft = function(dt){
      this.posX = this.posX - this.ds*dt;
      this._direction = this.playerDir.Left;
    }

    Player.prototype.moveRight = function(dt){
      this.posX = this.posX + this.ds*dt;
      this._direction = this.playerDir.Right;
    }
    
    

    game.update = function(dt){
        if(game._input.keyStatus['d']){
            //game._player.posX = game._player.posX + game._player.ds*dt; 
            game._player.moveRight(dt);
            console.log("right");
        }
        if(game._input.keyStatus['a']){
            //game._player.posX = game._player.posX - game._player.ds*dt;
            game._player.moveLeft(dt);
            console.log("left");
        }
        if(game._input.keyStatus['w']){
            //game._player.posY = game._player.posY - game._player.ds*dt;
            game._player.moveUp(dt);
            console.log("up");
        }
        if(game._input.keyStatus['s']){
            //game._player.posY = game._player.posY + game._player.ds*dt;
            game._player.moveDown(dt);
            console.log("down");
        }
    }



        
//////////////////////////////////////////////////////////////////////////
    // object for handling the loading of files
    var Loader = function() {
        this.imgCache = [];
        this.loading = [];
        //this.readyCallBacks = []; // may not needed
        this.imgLoaded = []; // false until image is loaded
        this.readCallbacks = []; // callbacks for when everything is loaded; may not be used
        this.allLoadedCb = function() {Console.log("something is wrong here :)")}; // callback for when everything is loaded
    }

		// returns true if all images have finished loading.
		Loader.prototype.allLoaded = function(){
      var allLoaded = true;

      for(var k in this.imgCache){
        if(this.imgCache.hasOwnProperty(k) && !this.imgCache[k]){
          allLoaded = false;
        }
      }

      return allLoaded;
		}

    
    Loader.prototype.load = function(uriOrArr) {
      var loaderThis = this;
      if(uriOrArr instanceof Array) {
        // if array than iterate through the array and load everything in the array
        uriOrArr.forEach(function(elem){
          loaderThis.loadFile(elem);
        });
      } else { // if it's just a string then load that one string
        loaderThis.loadFile(uriOrArr);
      }
    }

    // loads a file from a uri/url
    Loader.prototype.loadFile = function(fileName) {
      var loaderThis = this; // ref to the this in qestion
      if(this.imgCache[fileName]){ // if the file is loaded then just return it 
        return this.imgCache[fileName];
      } else { // if it is not loaded then load it 
        var imgsp = new Image();
        imgsp.onload = function(){
          loaderThis.imgCache[fileName] = imgsp; // image is now loaded, save it to the image cache
          // check to see if all the images have been loaded.
          // if yes then call the all loaded callback
          if(loaderThis.allLoaded()){
            loaderThis.allLoadedCb();
          }
        }
        // defult values while the system is loaded
        this.imgCache[fileName] = false;
        imgsp.src = fileName;
      }
    }

    // factory function in loader for making sprites.  
    Loader.prototype.getSprites = function(){
      // right now just use the constents for the dt sprite sheet
      var SheetWidth = 1536;
      var SheetHeight = 1024;
      var SpriteWidth = 256;
      var SpriteHeight = 256;
      var AnimationFrames = 10;
      var AngularViews = 4;
      // sizes of the sprite to be rendered 
      var spSizeX = 128;
      var spSizeY = 128;
      var renderSpeed = 9;
      // create an array and and the sprites to it
      var sprites = [];
      for(var k in this.imgCache){
        // load the sprite sheet image into a sprite sheet object 
        var newSprite = new Sprite(SheetWidth,SheetHeight,SpriteWidth,SpriteHeight,AnimationFrames,AngularViews,spSizeX,spSizeY,renderSpeed,this.imgCache[k]);
        sprites.push(newSprite);
      }

      return sprites;
    }

    // callback for when allspries are called
    Loader.prototype.onAllLoaded = function(callback){
      this.allLoadedCb = callback;
    }

    // loads and creates sprite objects based on json data
    // takes in an array of strings which are the file names of all the json files that have sprite info
    Loader.prototype.loadSpriteFromJson = function(jsonArr) {

      // nested function to use as a call back for loading sprites 
      function onJsonLoad()
      {
        if(this.status == 200){
          var loadedJson = this.responseText;
        }
      }      

      for(var index in jsonArr){
        var oReq = new XMLHttpRequest();
        oReq.addEventListener("load", onJsonLoad);
        var path = jsonArr[index];
        oReq.open("GET", jsonArr[index],false);
        oReq.send();
      }
    }

/////////////////////////////
    // object for handling sprite sheets
    // this is kinda complex, but one of the cooler parts of this program
    var Sprite = function(sheetWidth,sheetHight,keyWidth,keyHeight,keys,views,rSizeX,rSizeY,updateSpeed,sheetImg){
      this._sheetImg = sheetImg;
      this.sheetWidth = sheetWidth; // width of the sprite sheet
      this.sheetHeight = sheetHight; // height of the sprite sheet
      // height and width of indivual keys in the sprite sheet
      this.keyWidth = keyWidth; 
      this.keyHight = keyHeight;
      // set the sizes for the x and y of the sprites
      this._renderSizeX = rSizeX;
      this._renderSizeY = rSizeY;
      // set some other stuff for the keys
      this._keys = keys; // number of keys in each frame
      this.views = views; // number of views that the sprite can have 
      this._index = 0; // internal index for which frame is being shown
      this._renderSpeed = updateSpeed; // right now defult render speed of the sprite
    }

    // update drawing index aginst the current time
    Sprite.prototype.update = function(dt){
      this._index += this._renderSpeed*dt;
    }

    Sprite.prototype.render = function(ctx){
      if(this._renderSpeed > 0){
        var idx = Math.floor(this._index) % this._keys;
        //console.log("index: "+idx);
        // use the local render key function to draw the sprite in qestion
        this.renderKey(30,30,idx,1);
      }
    }

    // simple function for rendering a single key of the sprite sheet 
    // also sort of used to figure out how canvas renders images
    // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images#Slicing
    Sprite.prototype.renderKey = function(posX,posY,keyFrame,view){
      var sx = this.keyWidth * keyFrame; // figure out which frame of the view to show
      var sy = this.keyHight * view; // figure out which view to show
      ctx.drawImage(this._sheetImg,sx,sy,this.keyWidth,this.keyHight,posX,posY,this._renderSizeX,this._renderSizeY);
    } 


    // main function
    game.main = function(){
        //fps = game.frameCount / ( (Date.now() - game.startTime)/1000);
        ctx.clearRect(0,0,canvas.width,canvas.height); // clear the screen for the new frame
        var dt = (Date.now() - game.lastTime)/1000.0;
        // draw the FPS
        //ctx.font = '40px serif';
        //ctx.fillText('fps: '+fps, 10, 50);
        game._player.drawPlayer();
        game.update(dt);
        
        game.lastTime = Date.now();
        game.frameCount += 1;
        //////////////////////////////////////////
        // do a simple render of the first frame of the idle sprite sheet
        var sp1 = game.entities[0]; // idleing trump sprite
        //sp1.renderKey(40,40,0,1);
        //////////////////////////////////////////
        sp1.render(ctx);
        // update all the graphics on the screen
        sp1.update(dt);
        

        w.requestAnimationFrame(game.main);
    }

    // start up game objects
    game._input = new Input();
    game._player = new Player(); 
    game._loader = new Loader();
    // attach a call to the input object 
   //debugger;
    w.onload = function(){
        game._input.initKeys();
      
        
        //game._loader.load(['./sprites/trump_iddle.png',
        //                   './sprites/trump_run.png',
        //                   './sprites/trump_walk.png'
        //                  ]);
        
        // call to method for loading all sprites from json
        game._loader.loadSpriteFromJson([
          "./sprites/trump_iddle.json",
          "./sprites/trump_run.json",
          "./sprites/trump_walk.json"
        ]);

          // callback for when all the assets for the game are loaded
          game._loader.onAllLoaded(function(){
          game.entities = game._loader.getSprites(); // factory method for returning a list of sprites 
          // download sprites for all the directions
         

          game.main();              
        });
    }

    
   

})(window,document);
